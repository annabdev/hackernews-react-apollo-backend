// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  lInkg: (where?: LInkgWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  lInkg: (where: LInkgWhereUniqueInput) => LInkgPromise;
  lInkgs: (args?: {
    where?: LInkgWhereInput;
    orderBy?: LInkgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<LInkg>;
  lInkgsConnection: (args?: {
    where?: LInkgWhereInput;
    orderBy?: LInkgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LInkgConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLInkg: (data: LInkgCreateInput) => LInkgPromise;
  updateLInkg: (args: {
    data: LInkgUpdateInput;
    where: LInkgWhereUniqueInput;
  }) => LInkgPromise;
  updateManyLInkgs: (args: {
    data: LInkgUpdateManyMutationInput;
    where?: LInkgWhereInput;
  }) => BatchPayloadPromise;
  upsertLInkg: (args: {
    where: LInkgWhereUniqueInput;
    create: LInkgCreateInput;
    update: LInkgUpdateInput;
  }) => LInkgPromise;
  deleteLInkg: (where: LInkgWhereUniqueInput) => LInkgPromise;
  deleteManyLInkgs: (where?: LInkgWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  lInkg: (
    where?: LInkgSubscriptionWhereInput
  ) => LInkgSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LInkgOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LInkgCreateInput {
  id?: ID_Input;
  description: String;
  url: String;
}

export interface LInkgUpdateInput {
  description?: String;
  url?: String;
}

export interface LInkgWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: LInkgWhereInput[] | LInkgWhereInput;
  OR?: LInkgWhereInput[] | LInkgWhereInput;
  NOT?: LInkgWhereInput[] | LInkgWhereInput;
}

export interface LInkgUpdateManyMutationInput {
  description?: String;
  url?: String;
}

export interface LInkgSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LInkgWhereInput;
  AND?: LInkgSubscriptionWhereInput[] | LInkgSubscriptionWhereInput;
  OR?: LInkgSubscriptionWhereInput[] | LInkgSubscriptionWhereInput;
  NOT?: LInkgSubscriptionWhereInput[] | LInkgSubscriptionWhereInput;
}

export type LInkgWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface LInkgEdge {
  node: LInkg;
  cursor: String;
}

export interface LInkgEdgePromise extends Promise<LInkgEdge>, Fragmentable {
  node: <T = LInkgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LInkgEdgeSubscription
  extends Promise<AsyncIterator<LInkgEdge>>,
    Fragmentable {
  node: <T = LInkgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LInkg {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LInkgPromise extends Promise<LInkg>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LInkgSubscription
  extends Promise<AsyncIterator<LInkg>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface LInkgSubscriptionPayload {
  mutation: MutationType;
  node: LInkg;
  updatedFields: String[];
  previousValues: LInkgPreviousValues;
}

export interface LInkgSubscriptionPayloadPromise
  extends Promise<LInkgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LInkgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LInkgPreviousValuesPromise>() => T;
}

export interface LInkgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LInkgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LInkgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LInkgPreviousValuesSubscription>() => T;
}

export interface LInkgConnection {
  pageInfo: PageInfo;
  edges: LInkgEdge[];
}

export interface LInkgConnectionPromise
  extends Promise<LInkgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LInkgEdge>>() => T;
  aggregate: <T = AggregateLInkgPromise>() => T;
}

export interface LInkgConnectionSubscription
  extends Promise<AsyncIterator<LInkgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LInkgEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLInkgSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLInkg {
  count: Int;
}

export interface AggregateLInkgPromise
  extends Promise<AggregateLInkg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLInkgSubscription
  extends Promise<AsyncIterator<AggregateLInkg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LInkgPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LInkgPreviousValuesPromise
  extends Promise<LInkgPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LInkgPreviousValuesSubscription
  extends Promise<AsyncIterator<LInkgPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "LInkg",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
